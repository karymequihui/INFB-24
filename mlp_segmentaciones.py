# -*- coding: utf-8 -*-
"""MLP SEGMENTACIONES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpLhkINtwOe1gcEL99GRng59EyAunTI9

# **Datos**
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile
from google.colab import drive

# Mount Google Drive (if not already mounted)
drive.mount('/content/drive')

# Fix the path to the zip file - Remove the extra //content
zip_path = '/content/drive/MyDrive/Colab Notebooks/descargas_kaggle/Segmentaciones.zip'
extract_path = '/content/dataset'  # Carpeta de destino

# Extraer
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

# Comprobar contenido
import os
os.listdir(extract_path)

# Comprobar el contenido de la carpeta "dataset"
dataset_contents = os.listdir("/content/dataset")
print(f"Contents of /content/dataset: {dataset_contents}")

# Comprobar el contenido de la carpeta "dataset"
dataset_contents = os.listdir("/content/dataset")
print(f"Contents of /content/dataset: {dataset_contents}")

# Comprobar el contenido de "Segmentaciones"
segmentaciones_contents = os.listdir("/content/dataset/Segmentaciones")
print(f"Contents of /content/dataset/Segmentaciones: {segmentaciones_contents}")

data_dir = "/content/dataset/Segmentaciones/a. Training Set"

import numpy as np
import cv2
import os

data_dir = "/content/dataset/Segmentaciones/a. Training Set"
sub_folders = os.listdir(data_dir)
print(len(sub_folders))

images = []
labels = []

"""# **Preprocesamiento**"""

for sub_folder in sub_folders:
    label = sub_folder

    # Constructing the path to the current sub_folder
    path = os.path.join(data_dir, sub_folder)

    # Listing all the images in the sub_folder
    sub_folder_images = os.listdir(path)

    for image_name in sub_folder_images:
        image_path = os.path.join(path, image_name)

        # Loading the image using OpenCV
        img = cv2.imread(image_path)

        # Convert the image to grayscale
        gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Resize the image to (256, 256 )
        resized_img = cv2.resize(gray_img, (256, 256))

        # Append the images to the image list
        images.append(resized_img)

        # Append the labels
        labels.append(label)

import matplotlib.pyplot as plt
plt.imshow(resized_img, cmap='gray')

images = np.array(images)
labels = np.array(labels)

img_resized = cv2.resize(resized_img, (256,256), )
img_resized = cv2.bitwise_not(img_resized)

import os

# Ruta del directorio
Numeros = '/content/segmentacion'

# Crear el directorio si no existe
os.makedirs(Numeros, exist_ok=True)

# Mostrar y guardar la imagen
plt.imshow(img_resized, cmap='gray')
plt.savefig(os.path.join(Numeros, "abc.png"))  # Guardar en el directorio creado

train_dir = "/content/dataset/Segmentaciones/a. Training Set"

test_dir = "/content/dataset/Segmentaciones/b. Test Set"

images = np.array(images)
labels = np.array(labels)

!pip install scikit-learn

# Importar train_test_split
from sklearn.model_selection import train_test_split

# Dividir los datos en conjuntos de entrenamiento y prueba
train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

# Preprocessing: visualization of variables and image normalization.
train_images.shape

len(train_labels)

train_labels

test_images.shape

len(test_labels)

# Normalization of pixel values.
train_images = train_images / 255.0
test_images = test_images / 255.0

"""# **Estructura y entrenamiento de la Red Neuronal Artificial Convolucional (CNN)**"""

from tensorflow.keras import models, layers
model = models.Sequential()

# Learning part
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

import tensorflow as tf
# Model Compliation: Features
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

from sklearn.preprocessing import LabelEncoder
from tensorflow import keras
from keras.utils import to_categorical

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Fit LabelEncoder on the labels and transform them to numerical labels
train_labels_encoded = label_encoder.fit_transform(train_labels)
test_labels_encoded = label_encoder.transform(test_labels)

# Convert numerical labels to one-hot encoded format
train_labels_one_hot = to_categorical(train_labels_encoded)
test_labels_one_hot = to_categorical(test_labels_encoded)

"""#**CNN Accuracy Results**"""

# Train the model and capture the training history
history = model.fit(train_images, train_labels_encoded, epochs=15,
                    validation_data=(test_images, test_labels_encoded))


# Plotting the training and validation accuracies
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.4, 1])
plt.xlim([-1, 11])
plt.legend(loc='lower right')
plt.show()

# Evaluate the model on the test data
test_loss, test_acc = model.evaluate(test_images, test_labels_encoded, verbose=2)

"""# **Predictions with the trained CNN.**"""

predictions = model.predict(test_images)

x = predictions[1]
y = test_labels[1]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[50]
y = test_labels[50]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[8]
y = test_labels[8]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[32]
y = test_labels[32]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[29]
y = test_labels[29]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[30]
y = test_labels[30]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[100]
y = test_labels[100]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

x = predictions[49]
y = test_labels[49]
print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + y)

"""# **Predicciones**"""

import matplotlib.pyplot as plt

# Indices of predictions to display
indices = [1,50,8,32,29,30,100,49]

# Assuming test_images contains the images
images_to_show = [test_images[i] for i in indices]

# Display the images
plt.figure(figsize=(12, 8))
for i, image in enumerate(images_to_show, 1):
    plt.subplot(2, 5, i)
    plt.imshow(image, cmap='gray')
    plt.title(f"Prediction {indices[i-1]}")
    plt.axis('off')

plt.tight_layout()
plt.show()